# Dictionary

A dictionary in Python is a built-in data structure that stores data in key-value pairs. 
It is mutable, meaning that you can add, remove, and modify items after the dictionary is created. 
Dictionaries are defined using curly braces {}, with each key-value pair separated by a colon :. 
Keys must be immutable data types such as strings, numbers, or tuples, while values can be of any data type.

#code

1)mydictionary={10:"Himanshu ",20:"Yash"}
  print(mydictionary)

output:-
{10:"himanshu",20:"Yash"}

2)mydictionary={10:"himanshu",20:"Yash"}
  print(mydictionary[10])

output:-
Himanshu

3)mydictionary={10:"Himanshu",20:"Yash"}
  mydicitionary[10]="ishaan"      #update the value
  mydicitionary["amount"]=1000    # insert the value
  print(mydictionary)
  mydicitionary.pop(20) 
  print(mydictionary)

output:-
{10:"ishaan",20:"Yash", 'amount': 1000}
{10:"ishaan",'amount': 1000}        # delete value

3)
data="hello"
count=0
for char in data:
   count+1
mydictionary={"total":count}
print(mydictionary)

output:-
{'total':5}

4)
data='user'
mydictionary={}
for char in data:
   mydictionary[char]=1
print(mydictionary)

output:-
{'u': 1, 's': 1, 'e': 1, 'r' : 1}

5)
data='hey ishaeea'
mydictionary={}
for char in data:
  if char in"aeiou"
    mydictionary[char]=1
print(mydictionary)

output:- 
{'e : 1,'i' : 1, 'a' : 1}

6)mydictionary={"amount":15}
  mydictionary["amount"]+200
  print(mydictionary)

output:-
{"amount":15}

7)mydictionary={"amount":15}
 mydictionary["amount"]= mydictionary["amount"]+200
 print(mydictionary)

output:-
{"amount":215}

8)
data='hey ishaeea'
mydictionary={}
for char in data:
  if char in"aeiou"
    if char not in mydictionary:
      mydictionary[char]=1
    else:
      mydictionary[char]= mydictionary[vhar]+1
print(mydictionary)

output:- 
{'e : 3,'i' : 1, 'a' : 2}

# List comprehension
1)
newlist=[]
for i in [10,20,40,50]:
  newlist.append(i+5)
print(newlist)

output:-
[15,25,45,55]

2) [ i+5 for i in [10,20,40,50] ]

output:-
[15,25,45,55]

3) dictionary comprehension

{char:1 for char in "hey"}

output:-

{'h' : 1, 'e' : 1, 'y' : 1}

#Function in Python

--> A function in Python is a block of organized, reusable code that performs a specific task. Functions help to break down larger programs into smaller, more manageable parts, making code easier to read, understand, and maintain. 

--> A function is defined using the def keyword, followed by the function name and parentheses (). Any input parameters or arguments should be placed within these parentheses. The function body begins after a colon : and is indented. 


# code for function in python

1)
def test():
 print("hello")

test()

output:-

hello

2)
def test():
 z=19
 print("hello", z)

test()
print(z)

output:-

error

3)
a=100     #global
def test():
 z=19     #local
 print("hello",z,a)

test()
print(a)

output:-

hello 19 100

4)
def msg(username): #parameter
   print("hey user", username)

msg("Arnav") #Argument
msg("Yash")

output:-
hey user Arnav
hey user Yash 

5) 
def total sum()
  num=15
  total=0
  for i in range(1,num+1):
    total=total+i
  print(f"sum of{num} is =>',total)

total sum()

output:-
Sum of 15 is => 120

def total sum(num)
  total=0
  for i in range(1,num+1):
    total=total+i
  print(f"sum of{num} is =>',total)

total sum(10)
total sum(5)

output:-
Sum of 15 is => 55
Sum of 15 is => 15

6)
def lcm(a, b):

 lcm = a if a > b else b

 while True:
  if lcm % a == 0 and lcm % b == 0:
   print("LCM of", a, "and", b, "is", lcm)
   break
  lcm += 1


lcm(2, 3)

output:-
LCM of 2 and 3 is 6

7)
def pattern(n):
 for i in range(n):
  print(" " * i, end="")

  for j in range(1, n - i + 1):
   print(j, end="")

  print()


pattern(4)

output:-
1234
 123
  12
   1

8)
def armstrong(num):
    temp = num
    sum = 0

    n = 0
    temp2 = num
    while temp2 > 0:
        n += 1
        temp2 //= 10

    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** n
        temp //= 10

    if sum == num:
        print(num, "is an Armstrong number")
    else:
        print(num, "is not an Armstrong number")

armstrong(222)

output:-
222 is not an Armstrong number

9)
def is_palindrome(number):
 if number < 0:
  return False

 original = number
 reversed_num = 0

 while number > 0:
  digit = number % 10
  reversed_num = reversed_num * 10 + digit
  number //= 10

 return original == reversed_num

print(is_palindrome(123))

output:-
False